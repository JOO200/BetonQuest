name: Build
on: [push]

jobs:
  prepare:
    name: Prepare version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: REPOSITORY_ID
          settings-path: ${{ github.workspace }}
          server-username: REPOSITORY_USER
          server-password: REPOSITORY_PASS

      - name: Collect maven version
        run: |
          POM_MAVEN_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
          POM_MAVEN_VERSION=${POM_MAVEN_VERSION::-9}
          PROPERTY_MAVEN_VERSION=$(mvn help:evaluate -Dexpression=version -q -DforceStdout)
          if [ $PROPERTY_MAVEN_VERSION != ${{ env.POM_MAVEN_VERSION }} ]; then echo "::error::The version of the property and the version of the pom are not equal! Property is '$PROPERTY_MAVEN_VERSION' and pom is '$POM_MAVEN_VERSION'."; exit 1; fi
          echo ::set-env name=POM_MAVEN_VERSION::$POM_MAVEN_VERSION
          echo "Collected the pom.xml version. The version is '$POM_MAVEN_VERSION'"
          mkdir build

      - name: Updating Version for Release Build
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          POM_MAVEN_VERSION=${{ env.POM_MAVEN_VERSION }}

          # Extract the version from the tag
          TAG_MAVEN_VERSION=${GITHUB_REF:11}
          echo "Collected the tag version. The version is 'TAG_MAVEN_VERSION'"

          # Check if tag and pom version are equal
          if [ $TAG_MAVEN_VERSION != $POM_MAVEN_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_MAVEN_VERSION' and pom is '${{ env.POM_MAVEN_VERSION }}'."; exit 1; fi
          echo $POM_MAVEN_VERSION >> build/Version.txt

      - name: Update Version for Development Build
        if: "!startsWith(github.ref,'refs/tags/v') && ( github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') )"
        run: |
          POM_MAVEN_VERSION=${{ env.POM_MAVEN_VERSION }}-DEV-
          $BRANCH_NAME=TAG_MAVEN_VERSION=${GITHUB_REF:11}
          BUILD_NUMBER=$(curl -F "secret=${{ secrets.SNAPSHOT_UPLOAD_PASSWORD }}" -F "version=${POM_MAVEN_VERSION} -F "branch=$BRANCH_NAME" https://betonquest.pl/api/v1/buildNumber | jq -r ".number")
          POM_MAVEN_VERSION=${POM_MAVEN_VERSION}${BUILD_NUMBER}
          echo $POM_MAVEN_VERSION >> build/Version.txt

      - name: Update Version for Artifact Build
        if: "!startsWith(github.ref,'refs/tags/v') || !github.ref == 'refs/heads/master' || !startsWith(github.ref,'refs/heads/master_v')"
        run: |
          POM_MAVEN_VERSION=${{ env.POM_MAVEN_VERSION }}-DEV-ARTIFACT-${GITHUB_RUN_NUMBER}
          echo $POM_MAVEN_VERSION >> build/Version.txt

      - name: Upload Version
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Version
          path: build/Version.txt

  build:
    name: Build artifacts
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: REPOSITORY_ID
          settings-path: ${{ github.workspace }}
          server-username: REPOSITORY_USER
          server-password: REPOSITORY_PASS

      - name: Download Version
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Version
          path: build/

      - name: Set Version
        run: |
          POM_MAVEN_VERSION=$(cat build/Version.txt)
          echo ::set-env name=POM_MAVEN_VERSION::$POM_MAVEN_VERSION

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Remove SNAPSHOT version for Release Build
        if: "startsWith(github.ref,'refs/tags/v')"
        run: |
          mvn versions:set -DremoveSnapshot

      - name: Set plugin version
        run: |
          sed -i 's~\${maven-version}~${{ env.POM_MAVEN_VERSION }}~g' ./src/main/resources/plugin.yml
          echo "Set the plugin version to '${{ env.POM_MAVEN_VERSION }}'"

      - name: Build with Maven
        run: |
          mkdir -p build/output
          mvn -B package --file pom.xml && \
            cp target/BetonQuest*.jar build/output/

      - name: Publish to Maven Repo
        if: "github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/heads/master_v') || startsWith(github.ref,'refs/tags/v')"
        run: |
          mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MAVEN_USERNAME: github-publisher
          MAVEN_TOKEN: ${{ secrets.MAVEN_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/output

  documentation:
    name: Build docs
    needs: [prepare]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
          architecture: 'x64'

      - name: Download Version
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Version
          path: build/

      - name: Set Version
        run: |
          POM_MAVEN_VERSION=$(cat build/Version.txt)
          echo ::set-env name=POM_MAVEN_VERSION::$POM_MAVEN_VERSION

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ./requirements.txt

      - name: Set docs version
        run: |
          sed -i 's~BetonQuest - UNOFFICIAL~BetonQuest - ${{ env.POM_MAVEN_VERSION }}~g' ./mkdocs.yml
          echo "Set the docs version to '${{ env.POM_MAVEN_VERSION }}'"

      - name: Build with mkdocs
        run: |
          mkdocs build

      - name: Upload Docs
        uses: actions/upload-artifact@v1
        with:
          name: BetonQuest-Docs
          path: build/docs

  # If a tag is pushed starting with 'v' then we create a new release and attach the binary and documentation
  deploy-release:
    name: Deploy release
    if: "startsWith(github.ref,'refs/tags/v')"
    needs: [build, documentation]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Git fetch
        run: git fetch --prune --unshallow

      - name: Download Artifacts
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Artifacts
          path: build/output

      - name: Download Docs
        uses: actions/download-artifact@v1
        with:
          name: BetonQuest-Docs
          path: build/docs

      - name: Deploy to Github Pages
        if: "github.ref == 'refs/heads/master' || startsWith(github.ref,'refs/tags/v')"
        run: |
          bash scripts/mkdocs.sh

      - name: Create Release
        # The since last release string will retrieve all commits since the last tag, else if none is found
        # it will return from the start of history, then pretty it up to show single line logs for each entry
        run: |
          set -x
          assets=()
          for asset in ./build/output/*.jar; do
            assets+=("-a" "$asset")
          done
          assets+=("-a" "build/docs/pdf/documentation.pdf#BetonQuest-Docs.pdf")

          tag_name="${GITHUB_REF##*/}"
          hub release create \
            "${assets[@]}" \
            -F - \
            "$tag_name" << EOF
          Release $tag_name

          [Online Docs](https://betonquest.github.io/BetonQuest)

          Since Last Release:
          $(git log $(git describe --tags --abbrev=0 HEAD^ 2> /dev/null || git rev-list --max-parents=0 HEAD)..HEAD --graph --pretty=format:'%h %d %s [%an]' --abbrev-commit)
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to SpigotMC
        run: |
          set -x
          assets=()
          for asset in ./build/binary/*.jar; do
            assets+=("$asset")
          done
          tag_name="${GITHUB_REF##*/}"

          docker login -u gitlab+deploy-token-2 -p ${DEPLOY_TOKEN} https://registry.worldguard.com.au
          cat > config.yml << EOF
          common:
            spigot:
              username: ${SPIGOT_USERNAME}
              password: ${SPIGOT_PASSWORD}
          EOF

          docker run -i \
            --shm-size=2g \
            -v $(pwd)/config.yml:/app/config/config.yml \
            -v $(pwd)/build:/app/build \
            registry.worldguard.com.au/bgrieve/spigot_tools:latest app resource add-version \
              portal-network.78053 \
              ${assets[0]} \
              ${tag_name} \
              "Release ${tag_name}" << EOF
          [plain]
          Release $tag_name

          Since Last Release:
          $(git log $(git describe --tags --abbrev=0 HEAD^ 2> /dev/null || git rev-list --max-parents=0 HEAD)..HEAD --graph --pretty=format:'%h %d %s [%an]' --abbrev-commit)
          [/plain]
          EOF
        env:
          DEPLOY_TOKEN: ${{ secrets.GITLAB_DEPLOY_TOKEN }}
          SPIGOT_USERNAME: ${{ secrets.SPIGOT_USERNAME }}
          SPIGOT_PASSWORD: ${{ secrets.SPIGOT_PASSWORD }}
